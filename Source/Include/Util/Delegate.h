#pragma once

#ifndef WINCOPIES_DELEGATE_H
#define WINCOPIES_DELEGATE_H

#include "UtilBase.h"

namespace WinCopies
{
	namespace Delegate
	{
		typedef void(*ActionVoid)();
		typedef std::function<void()> ActionFunctionVoid;

		TEMPLATE using Function = T(*)();
		TEMPLATE using FunctionFunction = std::function<T()>;

		CREATE_DELEGATE_ACTION(0, _DELEGATE_ACTION)
		CREATE_DELEGATE_ACTION(1, _INSTANCE_ACTION)
		CREATE_DELEGATE_ACTION(0, _STD_ACTION)

		CREATE_DELEGATE_ACTIONS(DELEGATE)
		CREATE_DELEGATE_ACTIONS(INSTANCE)
		CREATE_DELEGATE_ACTIONS(ACTION)

		CREATE_SELECTOR_DELEGATES(Converter, T)
		CREATE_SELECTOR_DELEGATES(Predicate, bool)

		CREATE_SELECTORS(PREDICATE)
		CREATE_SELECTORS(COMPARISON)
		CREATE_SELECTORS(EQUALITY_COMPARISON)

		CREATE_COMPARISON_DELEGATES()
		CREATE_COMPARISON_DELEGATES(Equality)
	}
}
#endif WINCOPIES_DELEGATE_H